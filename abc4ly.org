* Feuille de route
** P0
Définir le style de la sortie (TBC avec des exemples réels):
	4 espaces entre deux notes (pour y voir bien clair)
	Une mesure par ligne de texte
	Identer les accolades (4 espaces)
	+Utilisation des vérificateurs de mesure+

Morceau:
	+c_major+
	+hello_world & friends+
	brid_harper_s (jig, sol, répétition simple)
		informations de contexte avec AbcSyntaxError: nom du
        fichier, numéro de ligne, contenu de la ligne, position de
        l'erreur (^), raison de l'erreur
	        altération: Gmaj => fa dièse
		noire pointée (E3 => e'4.)
		répétition |: ... :|

Traiter la durée des notes:
	Supprimer la duplication de l'appel à normalize_time_signature()
	+Calculer la durée des notes par défaut (default note length)+
	Gérer le coefficient multiplicateur (e.g. A2) => rallonger la durée par défaut
	Gérer le coefficient diviseur => diminuer la durée par défaut
	Gérer les marqueurs de rythme brisé (broken rythms markers: a>b, etc.)
	Gérer les triolets de croche. Exemple en 4/4: "(3 abc"
	Gérer les n-uplets (avec n variant de 2 à 9)
	Gérer le champ informatif "default note length" (L:) qui permet de changer la durée des notes par défaut:
		Dans l'entête
		A l'improviste dans le morceau
	Gérer les notes liées

Reconnaître la hauteur des notes:
	+Majuscules / minuscules / apostrophe / virgule+
	Altérations (dièse, bémol, naturel, ...)
	Silences (rests)

Reconnaître la structure du morceau (barres de mesure, répétitions, ...):
	+Séparateur de mesures+

En cas d'erreur de syntaxe ABC, donner du contexte à l'utilisateur (nom
du fichier, numéro de la ligne et description de l'erreur)

** P1
Reconnaître le champ tempo

Vérifier que les champs informatifs réservés à l'entête ne se retrouvent
pas ailleurs dans le morceau.

Reconnaître les accords

Si un nom de fichier lilypond n'est pas spécifié, sortir sur stdout

Translation de la tonalité du morceau "Partie 2": "K:..." => "\key ..."
	Highland bagpipe keys (HP et Hp)
	Global accidentals

Notation des modes? Dans abc.txt, exemple Dmix = f# + c# + gnat. Est-ce
que ça se retrouve dans la musique écrite?

Beaming: notes groupées sans espace

** Done
Ouvrir le fichier abc
Reconnaître le champ informatif "titre" (T)

Un morceau peut avoir plusieurs titres qui peuvent même apparaître au
milieu des notes. Le titre du morceau pour lilypond sera le premier
champ titre rencontré.

Reconnaître le champ informatif "compositeur" (C)
Reconnaître le champ informatif "rythme" (R)

Ignorer les champs informatif valides non gérés: "any line beginning
with a letter in the range A-Z and immediately followed by a : is
interpreted as a field".

Ignorer les commentaires
Ignorer les lignes vides

Vérifier que pas de problème d'analyse quand le fichier ne termine pas
par une ligne vide.

Générer l'entête du fichier lilypond:
    numéro de version
    titre
    auteur
    générer le MIDI par défaut (permet de vérifier la conversion à l'oreille)

Extraire et faire apparaître dans l'entête "meter" le type de morceau (jig
reel, ...) si il est donné dans le .abc
    R:<not empty> => meter
    R: absent => not meter
    R:<empty> => not meter

Reconnaître le champ "signature rythmique" ou "mesure" (meter):
	C = 4/4 = common time
	C| = 2/2 = cut time
	Fraction (4/4, 6/8, ...) = entier  + "/" + entier
	Des espaces dans la fraction (OK)
	Erreur fatale si le champ est absent (exception "abc syntax error")
	Erreur fatale si le champ est incorrect (exception "abc syntax error")

Translation de la tonalité du morceau "Partie 1": "K:..." => "\key ..."
	K:C => \key c \major
	K:s => AbcSyntaxError
	K: => AbcSyntaxError
	K:Bb => \key bes
	K:F# => \key fis
	K:Am => \key a \minor
	K:G minor => \key g \minor
	K:Eb minor => \key ees \minor
	K:D mixolydian => \key d \mixolydian
	K:DMix
	K:Dmix
	les 7 modes

** Wontdo

* But du jeu
Avoir un abc2ly qui marche pour tous les .abc du tunebook. Vérifier la
syntaxe du fichier .abc: si problème bloquant: arrêt, sinon: warning.

Prendre en main la méthode TDD.

Améliorer ma maîtrise de Python. Code compatible Python 2.6 et Python 3.

* Stratégie
Ré-écrire abc2ly en Python en utilisant la méthode TDD et en se
focalisant sur les spécifications "abc.txt". Python 2.6 compatible
Python 3 partout où c'est possible.

En parallèle écrire un jeu de tests de régressions. S'inspirer du (et à
terme, s'intégrer dans le) système de tests de régressions de lilypond
("make test-baseline").

* Principe des tests
Tests unitaires: utilisation du module unittest de Python (clone de
JUnit, l'environnement de test utilisé pour illustrer TDD).

Tests fonctionnels: pour chaque test de la base, comparaison automatique
de la sortie de abc2ly (.ly) avec un fichier .ly de référence. Pour
valider les .ly de référence: la première fois, comparer le fichier .abc
avec le résultat graphique de lilypond (e.g. page web qui met en vis à
vis le code abc et la partition). Les fois suivantes, comparer la
nouvelle partition (abc=>ly=>png) à la partition de référence.

En résumé, 3 outils:
  - abc2ly-test-ref (abc_vs_png) => génération de snippets de référence
    (.ly et .png) et d'une page web
  - abc2ly-test
    => génération de nouveaux snippets .ly
    => comparaison texte de ces snippets avec les snippets de
    référence. Création d'un rapport.
    => génération de nouveaux snippets .png (et log des erreurs)
    => génération d'une page web qui met les snippets .png en relation
    avec les snippets de référence en faisant apparaître les différences
    idem les tests de régression de lilypond et en affichant les
    statistiques.

* Design de abc4ly.py
Nom du programme: abc4ly.py

Base de l'analyseur: 
- 1 ligne de texte
- type: commentaire (%) ou ligne vide, champ informatif, musique.

Pour chaque ligne de texte:
    - commentaire: on ignore la ligne
    - ligne vide: on ignore la ligne
    - champ informatif: on vérifie la syntaxe, on extrait l'information
      en supprimant les caractères blancs en trop

La hauteur des notes est traduite de manière absolue. On n'utilise pas
le mode "\relative": ce mode facilite l'écriture manuelle mais n'est pas
facile à lire et est plus compliqué à écrire automatiquement.

On utilise les vérificateurs de mesure: permet à lilypond d'informer
l'utilisateur des erreurs d'écriture (quand ce n'est pas fait par abc4ly).

* Gestion des champs informatifs
On retient les champs informatifs suivants:

Pour l'entête (titre, auteur, type de morceau):

    dans un premier temps:

Field name            header tune elsewhere Used by Examples and notes
==========            ====== ==== ========= ======= ==================
C:composer            yes                           C:Trad.
R:rhythm              yes         yes       index   R:R, R:reel
T:title               second yes                    T:Paddy O'Rafferty

    dans un second temps, pourquoi pas:

Field name            header tune elsewhere Used by Examples and notes
==========            ====== ==== ========= ======= ==================
D:discography         yes                   archive D:Chieftans IV
H:history             yes         yes       archive H:This tune said to ...


Pour la musique:

Field name            header tune elsewhere Used by Examples and notes
==========            ====== ==== ========= ======= ==================
K:key                 last   yes                    K:G, K:Dm, K:AMix
L:default note length yes    yes                    L:1/4, L:1/8
M:meter               yes    yes  yes               M:3/4, M:4/4
Q:tempo               yes    yes                    Q:200, Q:C2=200


Champs ignorés:

Field name            header tune elsewhere Used by Examples and notes
==========            ====== ==== ========= ======= ==================
A:area                yes                           A:Donegal, A:Bampton
B:book                yes         yes       archive B:O'Neills
E:elemskip            yes    yes                    see Line Breaking
F:file name                         yes               see index.tex
G:group               yes         yes       archive G:flute
I:information         yes         yes       playabc
N:notes               yes                           N:see also O'Neills - 234
O:origin              yes         yes       index   O:I, O:Irish, O:English
P:parts               yes    yes                    P:ABAC, P:A, P:B
S:source              yes                           S:collected in Brittany
W:words                      yes                    W:Hey, the dusty miller
X:reference number    first                         X:1, X:2
Z:transcription note  yes                           Z:from photocopy

Les champs spécifiés dans abc.txt mais non traités par myabc2ly sont
ignorés silencieusement. La découverte d'un champ informatif non
spécifié génère l'affichage d'un warning.
* Rappels ABC
Durée des notes par défaut:
	1. Calculer (Evaluer) la signature rythmique qu'on appelera DTS
           (decimal tempo signature).
	   Exemples: dts(3/4) = 0.75; dts(2/2) = 1
	2. Si dts < 0.75: default note length = sixteenth note (double
           croche = 16). Sinon (dts >= 0.75): default note length = eighth
           note (croche = 8)

** Grammaire ABC
Qu'est-ce qu'une note?

note : [ guitar_chord ] | [ accent ] | [ accidental ] pitch \
              [ octaver ] [ lenght_modifier ]

accidental : '^' | '=' | '_' | '^^' |'__'

pitch : [a-gAG]

octaver : "'" | ','

length_modifier : multiplier | divider

multiplier = number

divider = /number

* Rappels lilypond
Altérations: bémol=es (e.g. bes pour sib), dièse=is

Tonalité du morceau:
	Gamme majeure: \key <hauteur> \major (e.g. "\key g \major")
	Gamme mineure: \key <hauteur> \minor (e.g. \key bes \minor) (sib mineur)
	Mode: \key <hauteur> \<mode> (e.g \key d \mixolydian)
	Pour faire plus compliqué: utiliser la propriété "Staff.keySignature"

Pour exprimer la durée des notes en lilypond:
	1 = whole note, 2 = half note (blanche), 4 = quarter note (noire)
	. = note pointée

* Equivalence ABC <=> lilypond
** Hauteur des notes

En notation absolue et avec la clé \treble de LilyPond:

| ABC | LilyPond |
|-----+----------|
| C,  | c        |
| C   | c'       |
| c   | c''      |
| c'  | c'''     |

** Durée des notes
